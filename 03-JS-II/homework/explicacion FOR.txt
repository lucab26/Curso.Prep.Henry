1- CÓDIGO "for"

	"for" ES UN CÓDIGO QUE SE ENCUENTRA DENTRO DE LOS CÓDIGOS DE BUCLE E INTEGRACIÓN. LA SIGLA QUE ENGLOBA A ESTE TIPO DE CÓDIGO, SE 

CONOCE COMO "D R Y CODE  // DONT REPEAT YOURSELF" QUE TRADUCIDO SERÍA "NO TE REPITAS". LA MISMA YA NOS DEJA BIEN CLARO EN SU NOMBRE PARA QUE NOS

VA A SERVIR ESTE TIPO DE COMANDO, LA IDEA DEL CÓDIGO "for" ES QUE NO ESTEMOS REPITIENDO COMANDOS MANUALMENTE.

	¿COMO ES LA ESTRUCTURA DE UN CÓDIGO "for?

		LA ESTRUCTURA DE NUESTRO COMANDO ES MUY SIMPLE. EN EL SIGUIENT EJEMPLO, VAMOS A VER COMO SE COMPONE NUESTRO
CÓDIGO "for":
 

			            ESTA VARIABLE            AQUÍ     ACÁ MARCAMOS
			            INDICA DONDE VA A      INDICAMOS  A QUE PASO QUEREMOS
				    COMENZAR NUESTRA      DONDE DEBE  QUE CREZCA NUESTRA
				    LISTA                   FRENAR    VARIABLE (I + 1)
                                                 vvv         vvv      vvv
			     CODIGO ------->for( var i = 0; i <= 100; i++) {
						
						/// BLOQUE DE CÓDIGO ///
					    }


	
	AHORA QUE YA SABEMOS COMO CONSTRUIR NUESTRO CÓDIGO, VAMOS A HACER QUE IMPRIMA UNA LISTA DEL 1 AL 100:


					   

				 function hacerLista (n) {
				
					for( var i = 1; i <= n; i++) {
						
						console.log (i)
					    }
                                 }


	SI NOSOTROS INTRODUCIMOS ESE COMANDO EN UNA CONSOLA, EMPEZARÁ A HACER UNA LISTA DEL 1 HASTA EL NUMERO QUE PONGAMOS. POR EJEMPLO
SI QUEREMOS HACER UNA LISTA DEL 1 AL 1000, TENDRÍAMOS QUE CAMBIAR LA "n" EN EL COMANDO "function" POR 1000. Y QUEDARIA DE ESTA FORMA:

				function hacerLista (1000) {...

	

2- OPERADORES LÓGICOS

	¿QUÉ SON LOS OPERADORES LÓGICOS? LOS OPERADORES LÓGICOS SE UTILIZAN PARA REALIZAR COMPARACIONES ENTRE VALORES, NUMERICOS O NO, 
DANDO COMO RESULTADO VALORES BOOLEANOS (true- false // verdadero - falso).
	LOS TRES OPERADORES LÓGICOS QUE MÁS VAMOS A UTILIZAR SON:

					-AND // Y ----> && (Shift + 6)
					-OR // O -----> || (Alt + 124)
					-NOT // NO ---> !! (Shift + 1)

	¿QUE DIFERENCIAS HAY ENTRE ESTOS OPERADORES?

					-AND // Y : NOS DARÁ RESULTADO true O verdadero CUANDO LOS VALORES SEAN true O verdaderos
					ej: (100 == 100) && (10>2) sería true. (100 == 100) && (10<2) sería false.

					-OR // O : SERÁ false CUANDO LOS DEMAS VALORES SEAN false
					ej: (100 > 200 ) || (2<1) sería false, ya que ambos valores son falsos.
			
					-NOT // NO : NOS INVERTIRÁ EL RESULTADO DEL OPERADOR.
					ej: !(100 > 2) sería false. (25 != 25) sería falso, ya que estamos diciendo que 25 no es igual a 25.

						